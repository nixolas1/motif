todo:
6. add remove button to right sidebar elements

multiline:
    * invert array
    * smooth array
    * add points
    * fill

7. multiplier as math function / function of other things
8. save/restore localstorage functionality
10. optimize
11. add time editing to footer
12. better input fields
12. filter

BUGS:
effects list not working

rotation



pres:
demo som funker bra: det kuleste
forklare teknologier
tanken i starten
hvordan utviklingen var: startet med research, fant ikke det jeg ville lage, lagde musikk api, visualizer api, fant p5.js, jobbet på struktur til beat detection, lagde frontend, jobbet på å få elementer og enkle input til å affektere, angularize. bare jobbet med å få det til å fungere, ikke UX vennlig
videre etter slutt

blog:
hvordan utviklerfasen startet




ok1. add object to scene by clicking
ok2. sync with options
ok3. inputs


            /*p.clear();
            var rms = analyzer.getLevel();


            // Draw an ellipse with size based on volume
            p.ellipse(p.width/2-150, p.height/2, 10+rms*300, 10+rms*300);


            var spectrum = fft.analyze();

            peakDetect.update(fft);

            if ( peakDetect.isDetected ) {
                ellipseWidth = 50;
            } else {
                ellipseWidth *= 0.95;
            }

            p.ellipse(p.width/2, p.height/2, ellipseWidth, ellipseWidth);

            p.beginShape();
            p.vertex(0, p.height);
            var len = spectrum.length-vertexSize;
            for (i = 0; i<len; i+=vertexSize) {
             p.vertex(i, p.map(spectrum[i], 0, 255, p.height, 0) );
            }
            p.vertex(p.width, p.height);
            p.endShape();*/



    /*

 element: {
        name: "element",
        add: function(prop){
            return null;
        },
        draw: function(p5){

        },
        instance: null,
        props: {
            x: {value: 0, min: -100, max: 100},
        },
        inputs: {

        }
    },

*/


for effect in effects:
    for affect in effeect.affected:
        affect += output;


        <div class="input-field col s12" >
          <select multiple ng-model="open.affected">
            <optgroup label="{{object.name+' '+$index}}" ng-repeat="object in scene.objects">
              <option value="{{prop}}" ng-repeat="(name, prop) in object.props">{{name}}</option>
            </optgroup>
          </select>
          <label>Connections</label>
        </div>


        <subnav title="inName" ng-repeat="(inName, input) in scene.inputs">
                       <subnav title="obName" ng-repeat="(obName, object) in scene.objects">
                            <a href
                                ng-repeat="(prName, prop) in object.props"
                                ng-click="addConnection(input, output, prop, obName+'.'+prop)"
                                class="waves-effect waves-teal">
                                {{prName}}
                            </a>
                            dropdown instead!
                       </subnav>
                    </subnav>
